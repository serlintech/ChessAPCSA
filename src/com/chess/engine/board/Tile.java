package com.chess.engine.board;

import com.chess.engine.pieces.Piece;
import com.google.common.collect.ImmutableMap;

import java.util.HashMap;
import java.util.Map;


/*****
 * Created By: Dylan Serlin
 * 5/17, Monday
 * Tile objects have a coordinate
 * isTileOccupied is boolean if a tile has a piece on it, returns true
 *
 */


public abstract  class Tile {

    protected final int tileCoor;
    private static final Map<Integer, EmptyTile> EMPTY_TILE_MAP = createEmptyTiles();

    private static Map<Integer, EmptyTile> createEmptyTiles() {
        final Map<Integer, EmptyTile> emptyTileMap = new HashMap<>();
        for(int i=0; i<BoardUtils.TILES; i++){
            emptyTileMap.put(i,new EmptyTile(i));
        }
        //Can also use Collections.unmodifiableMap(emptyTileMap);
        return ImmutableMap.copyOf(emptyTileMap);       //using guava module, create immutable hashmap of empty tiles
    }
    public static Tile createTile(final int tileCoor, final Piece piece){
        return piece != null ? new OccupiedTile(tileCoor, piece) : EMPTY_TILE_MAP.get(tileCoor);// TODO
    }


    private Tile(final int tilecoor){               //tiles are generated by themselves so constructor is private
        this.tileCoor=tilecoor;
    }

    public abstract boolean isTileOccupied();
    public abstract Piece getPiece();


    public int getTileCoor(){
        return this.tileCoor;
    }

    public static final class EmptyTile extends Tile{
        @Override
        public String toString(){
            return "-";
        }
        private EmptyTile(int coordinate){
            super(coordinate);
        }

        @Override
        public boolean isTileOccupied() {
            return false;
        }

        @Override
        public Piece getPiece() {
            return null;
        }
    }

    public static final class OccupiedTile extends Tile{
        private final Piece pieceOnTile;
        private OccupiedTile(int pCoor, Piece pieceOnTile){
            super(pCoor);
            this.pieceOnTile=pieceOnTile;
        }
        @Override
        public String toString(){
            return getPiece().getPieceAlliance().isBlack() ? getPiece().toString().toLowerCase() :
                    getPiece().toString();
        }
        @Override
        public Piece getPiece() {
            return pieceOnTile;
        }

        @Override
        public boolean isTileOccupied() {
            return true;
        }
    }

}
